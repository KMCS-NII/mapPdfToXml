#!/usr/bin/perl

use strict;
use warnings;

# usage: perl mapXmlAndPdf.pl (src id map tsv filepath) (src xhtml dirpath) (src pdf dirpath) (dst json dirpath)

# path for libkyotocabinet
BEGIN {

  require DynaLoader;

  my @libs;
  if (defined($ENV{'LD_LIBRARY_PATH'})) {
    @libs = split(':', $ENV{'LD_LIBRARY_PATH'});
    unless(grep(/^\/usr\/local\/lib\/?/, @libs)) {
      unshift(@libs, '/usr/local/lib');
    }
  } else {
    unshift(@libs, '/usr/local/lib');
  }

  foreach my $path (@libs) {

    my $libPath = $path.'/libkyotocabinet.so';
    if(-X $libPath) {
      DynaLoader::dl_load_file($libPath);
      last;
    }
  }

}

use File::Temp;
use File::Find;
use File::Spec;
use File::Path;
use KyotoCabinet;
use JSON;

use lib '/usr/local/share/nii.xml-pdf/';

use id::Manager;
use xml::Api;
use xml::Importer;
use xml::XHTMLFormatter;
use pdf::Api;
use pdf::Parser;
use pdf::PdfxmlImporter;
use pdf::BoundaryDB;
use map::Mapper;
use map::Index;

use constant SCALE => 2.0;

my $outputLog = 1;
my $asXML = 1;
my $xmlFilter = ['xml', 'xhtml', 'html'];
my $mapFile = undef;
my $skipElms = ['head'];

for(my $i = 0; $i < int(@ARGV); $i++) {
    if($ARGV[$i] eq '-q') {
	$outputLog = 0;
	splice(@ARGV, $i, 1);
	last;
    }
}
for(my $i = 0; $i < int(@ARGV); $i++) {
    if($ARGV[$i] eq '--json') {
	$asXML = 0;
	splice(@ARGV, $i, 1);
	last;
    }
}
for(my $i = 0; $i < int(@ARGV); $i++) {
    if($ARGV[$i] eq '--xml') {
	$asXML = 1;
	splice(@ARGV, $i, 1);
	last;
    }
}
for(my $i = 0; $i < int(@ARGV); $i++) {
    if(my ($ext) = ($ARGV[$i] =~ /^--xml-extention=(.+)$/)) {
	$xmlFilter = [$ext];
	splice(@ARGV, $i, 1);
	last;
    }
}
for(my $i = 0; $i < int(@ARGV); $i++) {
    if(my ($path) = ($ARGV[$i] =~ /^--map-file=(.+)$/)) {
	$mapFile = $path;
	splice(@ARGV, $i, 1);
	last;
    }
}
for(my $i = 0; $i < int(@ARGV); $i++) {
    if(my ($params) = ($ARGV[$i] =~ /^--skip-conditions=(.*)$/)) {
	(@$skipElms) = split(',', $params);
	splice(@ARGV, $i, 1);
	last;
    }
}

my ($srcXmlPath, $srcPdfPath, $dstDirpath) = @ARGV;

unless(defined($dstDirpath)) {
    print "Usage: perl mapXmlAndPdf.pl [-q] [--xml|--json] [--xml-extention=(xml file extention)] [--skip-conditions=[(elm)[:(class)],(elm)[:(class)],...]] [--map-file=(src id map tsv filepath)] (src xml path) (src pdf path) (dst dirpath)\n";
    print "\t-q: suppress log output\n";
    print "\t--xml: output as XML (default)\n";
    print "\t--json: output as JSON\n";
    print "\t--xml-extention: read xml files with specified extention.\n";
    print "\t\tunless specified, xml > xhtml > html is used\n";
    print "\t--skip-conditions: ignore specified elms in xml files. default is 'head'.\n";
    print "\t--map-file: id map tsv\n";
    exit(1);
};

# --------------------------------
my $workDir = File::Temp::tempdir(CLEANUP=>1);
my $idManager = new id::Manager($workDir.'/id.kch');
my $pdfDbPath = $workDir.'/pdf.kch';
my $xhtmlDbPath = $workDir.'/xhtml.kch';
my $boundaryDbPath = $workDir.'/boundary.kch';
my $mapDbPath = $workDir.'/map.kch';

# normalize dirpath
$srcXmlPath = File::Spec->rel2abs($srcXmlPath);
$srcPdfPath = File::Spec->rel2abs($srcPdfPath);
$dstDirpath = File::Spec->rel2abs($dstDirpath);

# --------------------------------
# - id/buildIdMap.pl
if(defined($mapFile)) {
    if ($outputLog) {
	print STDERR "[INFO] building the id map...\n";
    }

    open(my $id_map_tsv_FH, '<', $mapFile)
      or die $?;

    while (<$id_map_tsv_FH>) {
	my $ids = mapFunction($_);
	$idManager->register(@$ids);
    }

    close($id_map_tsv_FH);
}

sub mapFunction # FIXME
{
    my ($id_map_line) = @_;
    chomp($id_map_line);
    my ($xhtmlId, $pdfId) = ($id_map_line =~ /^(.+)\s+(.+)$/);
    unless(defined($pdfId)) {
	die $id_map_line." seems not to contain pdf id.";
    }
    my ($uid) = ($pdfId =~ /([^\/]+)$/);
    $uid =~ s/\.[^.]+$//;
#    return [$pdfId, $pdfId.'.pdf', $xhtmlId.'.xhtml'];
    return [$uid, $pdfId, $xhtmlId];
#    return [$pdfId, $pdfId.'.pdf', $xhtmlId.'.html'];
}


# --------------------------------
# - xml/import.pl
sub procXML {
    # global: $srcXmlPath, $mapFile, $outputLog
    my ($articleID, $filePath, $importer) = @_;

    if($outputLog) {
	print STDERR '[INFO] - '.$filePath, "\n";
    }

    open(my $srcFH, '<', $filePath)
      or die "Opening $filePath  failed.";

    my @lines = <$srcFH>;

    close($srcFH);

    my $xmlStr = join('', @lines);

    unless($xmlStr =~ /^\s+$/) {

	return if($importer->isStored($articleID));
	eval {
	    my $articleInfo = $importer->convert($xmlStr);
	    $importer->store($articleID, $articleInfo);
	};
	if ($@) {
	    warn '[WARN] '.$@;
	}
    }
}

{
    if($outputLog) {
	print STDERR "[INFO] importing XML...\n";
    }

    my $importer = new xml::Importer($xhtmlDbPath);

    my $xmlFilterSingle = undef;
    if(int(@$xmlFilter) == 1) {
	$xmlFilterSingle = $xmlFilter->[0];
    }

    if(-d $srcXmlPath) {

	unless($srcXmlPath =~ /\/$/) {
	    $srcXmlPath .= '/';
	}
	File::Find::find
	    (
	     sub{
		 if (defined($xmlFilterSingle)) {
		     return unless($_ =~ /\.$xmlFilterSingle$/);
		 } else {

		     my ($ext) = ($_ =~ /\.([^.]+)$/);
		     return unless(defined($ext));

		     foreach my $testeeExt (@$xmlFilter) {

			 last if($testeeExt eq $ext);

			 # there is more prior file than found by File::Find::find
			 my $targetPath = $File::Find::name;
			 $targetPath =~ s/$ext$/$testeeExt/;

			 return if(-r $targetPath);
		     }
		 }
		 #return unless ($_ =~ /(?:xml|xhtml|html)$/);

		 # File::Find modifies cwd, and it prevents JsonConfig from searching config files.
		 #my $finderCwd = Cwd::getcwd();
		 #chdir($cwd);
		 my $articleID = substr($File::Find::name, length($srcXmlPath));
		 unless(defined($mapFile)) {
		     $articleID =~ s/\.[^\.]+$//; # remove ext
		 }

		 procXML($articleID, $File::Find::name, $importer);
	     },
	     $srcXmlPath);
    } else { # seems to be a file
	if(-d $srcPdfPath) {
	    # cannot determin pdf filename
	    die "[ERROR] XML path must be a directory if PDF path is a directory.\n";
	}

	my $articleID = $srcPdfPath;
	$articleID =~ s/.+\///; # remove dirs
	$articleID =~ s/\.[^.]+$//; # remove ext

	procXML($articleID, $srcXmlPath, $importer);
    }
}

# --------------------------------
# - pdf/import.pl
sub procPDF {
    # global: SCALE, $srcPdfPath, $mapFile, $idManager
    my ($articleID, $filePath, $importer) = @_;

    if($outputLog) {
	print STDERR '[INFO] - '.$filePath, "\n";
    }
    my $xmlStr = pdf::Parser::parseFile($filePath, SCALE);
    unless(length($xmlStr) > 0) {
	warn "[WARN] ".$filePath." looks non-PDF. Skipped.";
	# chdir($finderCwd);
	return;
    }
    my $articleInfo = $importer->convert($xmlStr, SCALE);
    $importer->store($articleID, $articleInfo);

    unless(defined($mapFile)) {
	$idManager->register($articleID, $articleID, $articleID);
    }
}

{
    if($outputLog) {
	print STDERR "[INFO] importing PDF...\n";
    }

    my $importer = new pdf::PdfxmlImporter($pdfDbPath);

    if(-d $srcPdfPath) {

	unless($srcPdfPath =~ /\/$/) {
	    $srcPdfPath .= '/';
	}

	File::Find::find
	    (
	     sub{
		 return unless ($_ =~ /\.pdf$/);

		 my $articleID = substr($File::Find::name, length($srcPdfPath));
		 unless(defined($mapFile)) {
		     $articleID =~ s/\.[^.]+$//; # remove ext
		 }
		 # File::Find modifies cwd, and it prevents JsonConfig from searching config files.
		 #my $finderCwd = Cwd::getcwd();
		 #chdir($cwd);

		 #print $File::Find::name, "\n";
		 procPDF($articleID, $File::Find::name, $importer);

		 #chdir($finderCwd);
	     },
	     $srcPdfPath);
    } else {
	my $articleID = $srcPdfPath;
	$articleID =~ s/.+\///; # remove dirs
	$articleID =~ s/\.[^.]+$//; # remove ext
	procPDF($articleID, $srcPdfPath, $importer);
    }
}

# --------------------------------
# - pdf/updateBoundaryDB.pl
{
    if($outputLog) {
	print STDERR "[INFO] storing boundary data...\n";
    }

    my $pdfDB = new KyotoCabinet::DB();
    $pdfDB->open($pdfDbPath,
		 KyotoCabinet::DB::OREADER)
      or die $pdfDB->error;

    my $boundaryDB = new KyotoCabinet::DB();
    $boundaryDB->open($boundaryDbPath,
		      KyotoCabinet::DB::OCREATE |
		      KyotoCabinet::DB::OWRITER)
      or die $boundaryDB->error;

    pdf::BoundaryDB::rebuild($idManager, $pdfDB, $boundaryDB);

    $boundaryDB->close();
    $pdfDB->close();
}

# --------------------------------
# - map/mapPdfAndXml.pl
{
    if($outputLog) {
	print STDERR "[INFO] mapping XML and PDF...\n";
    }

    my $xmlAPI = new xml::Api::Local($xhtmlDbPath);
    my $pdfAPI = new pdf::Api::Local($pdfDbPath);
    my $mapper = new map::Mapper($mapDbPath);
    $mapper->skipConditions($skipElms);

    $idManager->doForAll
      (
       sub{
	   my ($self, $uid, $pdfid, $xmlid) = @_;

	   return if($mapper->isStored($uid));

	   if($outputLog) {
	       print STDERR '[INFO] - '.$xmlid.' '.$pdfid, "\n";
	   }

	   my $xmlInfo = $xmlAPI->getArticleInfo($xmlid);
	   my $pdfInfo = $pdfAPI->getArticleInfo($pdfid);

	   unless(defined($xmlInfo)) {
	       if($outputLog) {
		   print STDERR '[WARN] XML '.$xmlid." is not found. skipped.\n";
	       }
	       return;
	   }
	   unless(defined($pdfInfo)) {
	       if($outputLog) {
		   print STDERR '[WARN] PDF '.$pdfid." is not found. skipped.\n";
	       }
	       return;
	   }

	   # print "- ", $uid, "\n";

	   eval {

	       my $mergedInfo = $mapper->mapPdfAndXml($xmlInfo, $pdfInfo);
	       $mapper->store($uid, $mergedInfo);
	   };
	   if ($@) {
	       warn '[WARN] '.$@;
	   }

       }, undef);

}

# --------------------------------
# - map/updateIndex.pl
#{
#    if($outputLog) {
#	print STDERR "[INFO] building index...\n";
#    }
#}

# --------------------------------
# - output : getArticleInfo
{
    if($outputLog) {
	print STDERR "[INFO] outputting the result...\n";
    }

    my $db = new KyotoCabinet::DB();
    $db->open($mapDbPath,
	      KyotoCabinet::DB::OREADER)
      or die '[ERROR] '.$db->error;


    my $cur = $db->cursor;
    $cur->jump();
    while(my ($articleUUID, $info) = $cur->get(1)) {

	my $DST;
	my $dstParentPath = $dstDirpath.'/'.$articleUUID;
	if($outputLog) {
	    print STDERR "[INFO] - ".$dstParentPath.($asXML ? '.xml' : '.json')."\n";
	}

	$dstParentPath =~ s/\/[^\/]+$/\//;
	unless(-d $dstParentPath) {
	    File::Path::make_path($dstParentPath) || die '[ERROR] cannot mkdir '.$dstParentPath;
	}

	if($asXML) {
	    open($DST, '>', $dstDirpath.'/'.$articleUUID.'.xml') || die '[ERROR] '.$!;
	    print $DST xml::XHTMLFormatter::format(JSON::decode_json($info));

	} else {
	    open($DST, '>', $dstDirpath.'/'.$articleUUID.'.json') || die '[ERROR] '.$!;
	    print $DST $info;
	}
	close($DST);
    }

    $db->close();
}

# --------------------------------
if($outputLog) {
    print STDERR "[INFO] Done.\n";
}
exit(0);
